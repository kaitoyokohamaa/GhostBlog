function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * See <a href="https://www.contentful.com/developers/docs/concepts/sync/">Synchronization</a> for more information.
 * @namespace Sync
 */
import { createRequestConfig, freezeSys, toPlainObject } from 'contentful-sdk-core';
import resolveResponse from 'contentful-resolve-response';
import mixinStringifySafe from './mixins/stringify-safe';
/**
 * @memberof Sync
 * @typedef SyncCollection
 * @prop {Array<Entities.Entry>} entries - All existing entries on first sync. New and updated entries on subsequent syncs.
 * @prop {Array<Entities.Asset>} assets - All existing assets on first sync. New and updated assets on subsequent syncs.
 * @prop {Array<Sync.DeletedEntry>} deletedEntries - List of deleted Entries since last sync
 * @prop {Array<Sync.DeletedAsset>} deletedAssets - List of deleted Assets since last sync
 * @prop {string} nextSyncToken - Token to be sent to the next sync call
 * @prop {function(): Object} toPlainObject() - Returns this Sync collection as a plain JS object
 * @prop {function(?function=, space=): Object} stringifySafe(replacer,space) - Stringifies the Sync collection, accounting for circular references. Circular references will be replaced with just a Link object, with a <code>circular</code> property set to <code>true</code>. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> and <a href="https://www.npmjs.com/package/json-stringify-safe">json-stringify-safe</a> for more details on the arguments this method can take.
 */

/**
 * Deleted Entries are the same as Entries, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedEntry
 * @type Entities.Entry
 */

/**
 * Deleted Assets are the same as Assets, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedAsset
 * @type Entities.Asset
 */

/**
 * This module retrieves all the available pages for a sync operation
 * @private
 * @param {Object} http - HTTP client
 * @param {Object} query - Query object
 * @param {Object} options - Sync options object
 * @param {boolean} [options.resolveLinks = true] - If links should be resolved
 * @param {boolean} [options.removeUnresolved = false] - If unresolvable links should get removed
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<SyncCollection>}
 */

export default function pagedSync(_x, _x2) {
  return _pagedSync.apply(this, arguments);
}
/**
 * @private
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @return {Object} Entities mapped to an object for each entity type
 */

function _pagedSync() {
  _pagedSync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(http, query) {
    var options,
        defaultOptions,
        _defaultOptions$optio,
        resolveLinks,
        removeUnresolved,
        paginate,
        syncOptions,
        response,
        mappedResponseItems,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};

            if (!(!query || !query.initial && !query.nextSyncToken && !query.nextPageToken)) {
              _context.next = 3;
              break;
            }

            throw new Error('Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing');

          case 3:
            if (!(query && query.content_type && !query.type)) {
              _context.next = 7;
              break;
            }

            query.type = 'Entry';
            _context.next = 9;
            break;

          case 7:
            if (!(query && query.content_type && query.type && query.type !== 'Entry')) {
              _context.next = 9;
              break;
            }

            throw new Error('When using the `content_type` filter your `type` parameter cannot be different from `Entry`.');

          case 9:
            defaultOptions = {
              resolveLinks: true,
              removeUnresolved: false,
              paginate: true
            };
            _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options), resolveLinks = _defaultOptions$optio.resolveLinks, removeUnresolved = _defaultOptions$optio.removeUnresolved, paginate = _defaultOptions$optio.paginate;
            syncOptions = {
              paginate: paginate
            };
            _context.next = 14;
            return getSyncPage(http, [], query, syncOptions);

          case 14:
            response = _context.sent;

            // clones response.items used in includes because we don't want these to be mutated
            if (resolveLinks) {
              response.items = resolveResponse(response, {
                removeUnresolved: removeUnresolved,
                itemEntryPoints: ['fields']
              });
            } // maps response items again after getters are attached


            mappedResponseItems = mapResponseItems(response.items);

            if (response.nextSyncToken) {
              mappedResponseItems.nextSyncToken = response.nextSyncToken;
            }

            if (response.nextPageToken) {
              mappedResponseItems.nextPageToken = response.nextPageToken;
            }

            return _context.abrupt("return", freezeSys(mixinStringifySafe(toPlainObject(mappedResponseItems))));

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _pagedSync.apply(this, arguments);
}

function mapResponseItems(items) {
  var reducer = function reducer(type) {
    return function (accumulated, item) {
      if (item.sys.type === type) {
        accumulated.push(toPlainObject(item));
      }

      return accumulated;
    };
  };

  return {
    entries: items.reduce(reducer('Entry'), []),
    assets: items.reduce(reducer('Asset'), []),
    deletedEntries: items.reduce(reducer('DeletedEntry'), []),
    deletedAssets: items.reduce(reducer('DeletedAsset'), [])
  };
}
/**
 * If the response contains a nextPageUrl, extracts the sync token to get the
 * next page and calls itself again with that token.
 * Otherwise, if the response contains a nextSyncUrl, extracts the sync token
 * and returns it.
 * On each call of this function, any retrieved items are collected in the
 * supplied items array, which gets returned in the end
 * @private
 * @param {Object} http
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @param {Object} query
 * @param {Object} options - Sync page options object
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<{items: Array, nextSyncToken: string}>}
 */


function getSyncPage(_x3, _x4, _x5, _x6) {
  return _getSyncPage.apply(this, arguments);
}
/**
 * Extracts token out of an url
 * @private
 */


function _getSyncPage() {
  _getSyncPage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(http, items, query, _ref) {
    var paginate, response, data;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            paginate = _ref.paginate;

            if (query.nextSyncToken) {
              query.sync_token = query.nextSyncToken;
              delete query.nextSyncToken;
            }

            if (query.nextPageToken) {
              query.sync_token = query.nextPageToken;
              delete query.nextPageToken;
            }

            if (query.sync_token) {
              delete query.initial;
              delete query.type;
              delete query.content_type;
              delete query.limit;
            }

            _context2.next = 6;
            return http.get('sync', createRequestConfig({
              query: query
            }));

          case 6:
            response = _context2.sent;
            data = response.data || {};
            items = items.concat(data.items || []);

            if (!data.nextPageUrl) {
              _context2.next = 17;
              break;
            }

            if (!paginate) {
              _context2.next = 14;
              break;
            }

            delete query.initial;
            query.sync_token = getToken(data.nextPageUrl);
            return _context2.abrupt("return", getSyncPage(http, items, query, {
              paginate: paginate
            }));

          case 14:
            return _context2.abrupt("return", {
              items: items,
              nextPageToken: getToken(data.nextPageUrl)
            });

          case 17:
            if (!data.nextSyncUrl) {
              _context2.next = 21;
              break;
            }

            return _context2.abrupt("return", {
              items: items,
              nextSyncToken: getToken(data.nextSyncUrl)
            });

          case 21:
            return _context2.abrupt("return", {
              items: []
            });

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSyncPage.apply(this, arguments);
}

function getToken(url) {
  var urlParts = url.split('?');
  return urlParts.length > 0 ? urlParts[1].replace('sync_token=', '') : '';
}