{"ast":null,"code":"import * as contentful from \"contentful\"; //contentfulの設定\n\nexport const client = contentful.createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n}); //全ての記事の獲得\n\nexport const getAllPosts = async () => {\n  const entries = await client.getEntries({\n    content_type: \"post\"\n  });\n\n  if (entries.items) {\n    return entries.items;\n  }\n\n  console.log(`Error getting .`);\n}; //idの獲得\n\nfunction parsePostIds({\n  fields\n}) {\n  return {\n    slug: fields.slug\n  };\n}\n\nfunction parsePostIdsEntries(entries, cb = parsePostIds) {\n  var _entries$items;\n\n  return entries === null || entries === void 0 ? void 0 : (_entries$items = entries.items) === null || _entries$items === void 0 ? void 0 : _entries$items.map(cb);\n}\n\nexport async function getAllPostsWithIds() {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    select: \"fields.ids\"\n  });\n  return parsePostIdsEntries(entries, post => post.fields);\n}","map":{"version":3,"sources":["/Users/yoko/Desktop/GhostBlog/lib/index.tsx"],"names":["contentful","client","createClient","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getAllPosts","entries","getEntries","content_type","items","console","log","parsePostIds","fields","slug","parsePostIdsEntries","cb","map","getAllPostsWithIds","select","post"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,YAA5B,C,CAEA;;AACA,OAAO,MAAMC,MAAM,GAAGD,UAAU,CAACE,YAAX,CAAwB;AAC5CC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADyB;AAE5CC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFmB,CAAxB,CAAf,C,CAIP;;AACA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,QAAMC,OAAO,GAAG,MAAMT,MAAM,CAACU,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE;AADwB,GAAlB,CAAtB;;AAIA,MAAIF,OAAO,CAACG,KAAZ,EAAmB;AACjB,WAAOH,OAAO,CAACG,KAAf;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAb;AACD,CATM,C,CAUP;;AACA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAkC;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAED,MAAM,CAACC;AADR,GAAP;AAGD;;AAED,SAASC,mBAAT,CAA6BT,OAA7B,EAAsCU,EAAE,GAAGJ,YAA3C,EAAyD;AAAA;;AACvD,SAAON,OAAP,aAAOA,OAAP,yCAAOA,OAAO,CAAEG,KAAhB,mDAAO,eAAgBQ,GAAhB,CAAoBD,EAApB,CAAP;AACD;;AAED,OAAO,eAAeE,kBAAf,GAAoC;AACzC,QAAMZ,OAAO,GAAG,MAAMT,MAAM,CAACU,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE,MADwB;AAEtCW,IAAAA,MAAM,EAAE;AAF8B,GAAlB,CAAtB;AAIA,SAAOJ,mBAAmB,CAACT,OAAD,EAAWc,IAAD,IAAUA,IAAI,CAACP,MAAzB,CAA1B;AACD","sourcesContent":["import * as contentful from \"contentful\";\n\n//contentfulの設定\nexport const client = contentful.createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n});\n//全ての記事の獲得\nexport const getAllPosts = async () => {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n  });\n\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting .`);\n};\n//idの獲得\nfunction parsePostIds({ fields }) {\n  return {\n    slug: fields.slug,\n  };\n}\n\nfunction parsePostIdsEntries(entries, cb = parsePostIds) {\n  return entries?.items?.map(cb);\n}\n\nexport async function getAllPostsWithIds() {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    select: \"fields.ids\",\n  });\n  return parsePostIdsEntries(entries, (post) => post.fields);\n}\n"]},"metadata":{},"sourceType":"module"}